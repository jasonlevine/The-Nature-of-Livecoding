
;; Mover data type: location, velocity, accleration, mass 
(bind-type Mover <float*,float*,float*,float>)

;; Constructor for the 2-dimensional case
(bind-func Mover_2D:[Mover*,float,float,float]*
  (lambda (mass x y)
    (let ((location (zalloc 2))
         (velocity (zalloc 2))
         (accel (zalloc 2)))
      (pfill! location x y)
      (pfill! velocity 0.0:float 0.0:float)
      (pfill! accel 0.0:float 0.0:float)
      (Mover location velocity accel mass))))

;; Overload the default constructor
(bind-poly Mover Mover_2D)

(bind-val g float 0.4)

(bind-func apply_force
  (lambda (m:Mover* force:vec)
      (vec2_div force (tref m 3))
      (vec2_inc (tref m 2) force)))

(bind-func update
  (lambda (m:Mover*)
      (vec2_inc (tref m 1) (tref m 2))
      (vec2_inc (tref m 0) (tref m 1))
      (vec2_scale (tref m 2) 0.)))


(bind-func display_mover
  (lambda (m:Mover*)
    (stroke 0. 0. 0. 1.)
    (stroke_width 2.)
    (fill 0.5 0.5 0.5 1.0)
    (circle (tref m 0) (* (tref m 3) 25.))))

(bind-poly display display_mover)

(bind-func attract
  (lambda (m1:Mover* m2:Mover*)
    (let ((force:vec (zalloc 2))
          (m1_location:vec (salloc 2))
          (m2_location:vec (salloc 2)))

      (vec2_set m1_location (tref m1 0))
      (vec2_set m2_location (tref m2 0))
      (vec2_set force (vec2_sub m1_location m2_location))

      (let ((d:float (vec2_mag force))
            (m1_mass:float (tref m1 3))
            (m2_mass:float (tref m2 3)))

        (set! d (constrain d 5. 25.))
        (vec2_normalize force)

        (let ((strength:float (/ (* g m1_mass m1_mass) (* d d))))
          (vec2_scale force strength)
          force)))))
