(bind-val g float 0.4)

;; Mover data type: location, velocity, accleration, mass 
(bind-type Mover <vec2*,vec2*,vec2*,float>)

;; Constructor
(bind-func Mover:[Mover*,float,float,float,]*
  (lambda (mass x y)
    (Mover:[Mover*,vec2*,vec2*,vec2*,float] 
      (vec2 x y) 
      (vec2 0. 0.) 
      (vec2 0. 0.) 
      mass)))

;; Now create an instance with particular initial values
(bind-func apply_force
  (lambda (m:Mover* force:vec2*)
      (v2div force (tref m 3))
      (v2inc (tref m 2) force)))

(bind-func update
  (lambda (m:Mover*)
      (v2inc (tref m 1) (tref m 2))
      (v2inc (tref m 0) (tref m 1))
      (v2scale (tref m 2) 0.)))

(bind-func display
  (lambda (m:Mover*)
    (stroke 0)
    (stroke_width 2.)
    (fill 127)
    (circle (tref m 0) (* (tref m 3) 5.))))


(bind-func repel
  (lambda (m1:Mover* m2:Mover*)
    (let ((force:vec2* (zalloc))
          (m1_location:vec2* (salloc))
          (m2_location:vec2* (salloc)))

      (v2set m1_location (tref m1 0))
      (v2set m2_location (tref m2 0))
      (v2set force (v2sub m1_location m2_location))

      (let ((d:float (magnitude force))
            (m1_mass:float (tref m1 3))
            (m2_mass:float (tref m2 3)))

        (set! d (constrain d 1. 10000.))
        (normalize force)

        (let ((strength:float (/ (* g m1_mass m1_mass) (* d d))))
          (v2scale force (* -1 strength))
          force)))))
