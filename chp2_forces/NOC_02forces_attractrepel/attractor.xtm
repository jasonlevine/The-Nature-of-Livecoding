; // Attraction
; // Daniel Shiffman <http://www.shiffman.net>

; // A class for a draggable attractive body in our world

; class Attractor {
;   float mass;    // Mass, tied to size
;   float G;       // Gravitational Constant
;   PVector location;   // Location
;   boolean dragging = false; // Is the object being dragged?
;   boolean rollover = false; // Is the mouse over the ellipse?
;   PVector dragOffset;  // holds the offset for when object is clicked on
;
; Ported to Extempore by Jason Levine

(bind-type Attractor <float,float,vec2*,i1,i1,vec2*>)

(bind-func Attractor
	(lambda ()
		(let ((location:vec2* (vec2 (/ width 2.) (/ height 2.)))
					(mass:float 20.)
					(G:float 1.)
					(drag_offset:vec2* (vec2 0. 0.)))
			(Attractor:[Attractor*,float,float,vec2*,i1,i1,vec2*]*
			  mass G location 0 0 drag_offset))))

(bind-func attract
	(lambda (a:Attractor* m:Mover*)
		(let ((force:vec2* (zalloc))
					(a_location:vec2* (salloc))
					(m_location:vec2* (salloc)))

			(v2set a_location (tref a 2))
			(v2set m_location (tref m 0))
			(v2set force (v2sub a_location m_location))

			(let ((d:float (magnitude force))
						(a_mass:float (tref a 0))
						(m_mass:float (tref m 3))
						(G:float (tref a 1)))

				(set! d (constrain d 5. 25.))
				(normalize force)

				(let ((strength:float (/ (* G a_mass m_mass) (* d d))))
					(v2scale force strength)
					force)))))

(bind-func display
	(lambda (a:Attractor*)
		(stroke_width 4.)
		(stroke 0)

		(let ((mass:float (tref a 0))
					(dragging:i1 (tref a 3))
					(rollover:i1 (tref a 4))
					(location:vec2* (tref a 2)))
			
			(cond ((dragging) (fill 50))
						((rollover) (fill 100))
						(else (fill 175 200)))

			(circle location (* mass 2.)))))



;; The methods below are for mouse interaction

(bind-func clicked
	(lambda (a:Attractor* mx:float my)
		(let ((location:vec2* (salloc))
					(mass:float (tref a 0))
					(drag_offset:vec2* (salloc)))
			(v2set location (tref a 2))
			(v2set drag_offset (tref a 5))

			(let ((d:float (distance mx my (getx location) (gety location))))
				
				(if (< d mass) 
					(begin
						(tset! a 3 1) ;; set dragged true
						(v2set drag_offset 
							(- (getx location) mx)
							(- (gety location) my))))
				void))))

(bind-func hover
	(lambda (a:Attractor* mx:float my)
		(let ((location:vec2* (tref a 2))
					(mass:float (tref a 0))
					(rollover:i1 (tref a 4)))
		
			(let ((d:float (distance mx my (getx location) (gety location))))
				
				(if (< d mass) 
					(tset! a 4 1) ;;set rollover true
					(tset! a 4 0)))))) ;;set rollover false

(bind-func stop_dragging
	(lambda (a:Attractor*)
		(tset! a 3 0)))



(bind-func drag
	(lambda (a:Attractor* mx:float my)
		(if (tref a 3)
			(begin
				(setx (tref a 2) (+ mx (getx (tref a 5))))
				(sety (tref a 2) (+ my (gety (tref a 5))))))
		void))
; // Attraction
; // Daniel Shiffman <http://www.shiffman.net>

; // A class for a draggable attractive body in our world

; class Attractor {
;   float mass;    // Mass, tied to size
;   float G;       // Gravitational Constant
;   PVector location;   // Location
;   boolean dragging = false; // Is the object being dragged?
;   boolean rollover = false; // Is the mouse over the ellipse?
;   PVector dragOffset;  // holds the offset for when object is clicked on
;
; Ported to Extempore by Jason Levine

(bind-type Attractor <float,float,vec2*,i1,i1,vec2*>)

(bind-func Attractor
	(lambda ()
		(let ((location:vec2* (vec2 (/ width 2.) (/ height 2.)))
					(mass:float 20.)
					(G:float 1.)
					(drag_offset:vec2* (vec2 0. 0.)))
			(Attractor:[Attractor*,float,float,vec2*,i1,i1,vec2*]*
			  mass G location 0 0 drag_offset))))

(bind-func attract
	(lambda (a:Attractor* m:Mover*)
		(let ((force:vec2* (zalloc))
					(a_location:vec2* (salloc))
					(m_location:vec2* (salloc)))

			(v2set a_location (tref a 2))
			(v2set m_location (tref m 0))
			(v2set force (v2sub a_location m_location))

			(let ((d:float (magnitude force))
						(a_mass:float (tref a 0))
						(m_mass:float (tref m 3))
						(G:float (tref a 1)))

				(set! d (constrain d 5. 25.))
				(normalize force)

				(let ((strength:float (/ (* G a_mass m_mass) (* d d))))
					(v2scale force strength)
					force)))))

(bind-func display
	(lambda (a:Attractor*)
		(stroke_width 4.)
		(stroke 0)

		(let ((mass:float (tref a 0))
					(dragging:i1 (tref a 3))
					(rollover:i1 (tref a 4))
					(location:vec2* (tref a 2)))
			
			(cond ((dragging) (fill 50))
						((rollover) (fill 100))
						(else (fill 175 200)))

			(circle location (* mass 2.)))))



;; The methods below are for mouse interaction

(bind-func clicked
	(lambda (a:Attractor* mx:float my)
		(let ((location:vec2* (salloc))
					(mass:float (tref a 0))
					(drag_offset:vec2* (salloc)))
			(v2set location (tref a 2))
			(v2set drag_offset (tref a 5))

			(let ((d:float (distance mx my (getx location) (gety location))))
				
				(if (< d mass) 
					(begin
						(tset! a 3 1) ;; set dragged true
						(v2set drag_offset 
							(- (getx location) mx)
							(- (gety location) my))))
				void))))

(bind-func hover
	(lambda (a:Attractor* mx:float my)
		(let ((location:vec2* (tref a 2))
					(mass:float (tref a 0))
					(rollover:i1 (tref a 4)))
		
			(let ((d:float (distance mx my (getx location) (gety location))))
				
				(if (< d mass) 
					(tset! a 4 1) ;;set rollover true
					(tset! a 4 0)))))) ;;set rollover false

(bind-func stop_dragging
	(lambda (a:Attractor*)
		(tset! a 3 0)))



(bind-func drag
	(lambda (a:Attractor* mx:float my)
		(if (tref a 3)
			(begin
				(setx (tref a 2) (+ mx (getx (tref a 5))))
				(sety (tref a 2) (+ my (gety (tref a 5))))))
		void))

