
;; Mover data type: location, velocity, accleration, mass 
(bind-type Mover <float*,float*,float*,float>)

;; Constructor for the 2-dimensional case
(bind-func Mover_2D:[Mover*,float,float,float]*
  (lambda (mass x y)
    (let
        ((location (zalloc 2))
         (velocity (zalloc 2))
         (accel (zalloc 2)))
      (pfill! location x y)
      (pfill! velocity 0.0:float 0.0:float)
      (pfill! accel 0.0:float 0.0:float)
      (Mover location velocity accel mass))))

;; Overload the default constructor
(bind-poly Mover Mover_2D)

;; Now create an instance with particular initial values
(bind-func apply_force
  (lambda (m:Mover* force:vec)
      (vec2_div force (tref m 3))
      (vec2_inc (tref m 2) force)))

(bind-func update
  (lambda (m:Mover*)
      (vec2_inc (tref m 1) (tref m 2))
      (vec2_inc (tref m 0) (tref m 1))
      (vec2_scale (tref m 2) 0.)))

(bind-func display
  (lambda (m:Mover*)
    (stroke 0. 0. 0. 1.)
    (stroke_width 2.)
    (fill 0.5 0.5 0.5 1.0)
    (circle (vec2_get_x (tref m 0)) (vec2_get_y (tref m 0)) 48.)))

(bind-func check_edges
  (lambda (m:Mover*)
    (if (or (> (vec2_get_x (tref m 0)) width) (< (vec2_get_x (tref m 0)) 0.0))
        (vec2_set_x (tref m 1) (* (vec2_get_x (tref m 1)) -1.0)))

    (if (or (> (vec2_get_y (tref m 0)) height) (< (vec2_get_y (tref m 0)) 0.0))
      (vec2_set_y (tref m 1) (* (vec2_get_y (tref m 1)) -1.0)))
    void))

; (bind-func apply_force
;   (lambda (m:Mover* force:vec)
;     (let ((mass:float (tref m 3))
;           (acceleration:vec (tref m 2)))
;       (vec2_div force mass)
;       (vec2_inc acceleration force))))

; (bind-func update
;   (lambda (m:Mover*)
;     (let ((location:vec (tref m 0))
;           (velocity:vec (tref m 1))
;           (acceleration:vec (tref m 2)))
;       (vec2_inc velocity acceleration)
;       (vec2_inc location velocity)
;       (vec2_scale acceleration 0.))))

; (bind-func display
;   (lambda (m:Mover*)
;     (let ((location:vec (tref m 0)))
;       (stroke 0. 0. 0. 1.)
;       (stroke_width 2.)
;       (fill 0.5 0.5 0.5 1.0)
;       (circle (vec2_get_x location) (vec2_get_y location) 48.))))

; (bind-func check_edges
;   (lambda (m:Mover*)
;     (let ((location:vec (tref m 0))
;           (velocity:vec (tref m 1)))
;       (if (or (> (vec2_get_x location) width) (< (vec2_get_x location) 0.0))
;           (vec2_set_x velocity (* (vec2_get_x velocity) -1.0)))

;       (if (or (> (vec2_get_y location) height) (< (vec2_get_y location) 0.0))
;         (vec2_set_y velocity (* (vec2_get_y velocity) -1.0)))
;       void)))






