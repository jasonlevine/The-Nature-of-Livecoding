;; -------VECTOR-------
;;  functions to work with 2d vectors 
(sys:load "libs/core/math.xtm")

(bind-alias vec float*)


;; getter and setters
(bind-func getx
  (lambda (v1:vec)
    (pref v1 0)))

(bind-func setx
  (lambda (v1:vec val:float)
    (pset! v1 0 val)))

(bind-func gety
  (lambda (v1:vec)
    (pref v1 1)))

(bind-func sety
  (lambda (v1:vec val:float)
    (pset! v1 1 val)))

(bind-func v2set
  (lambda (v1:vec x:float y:float)
    (pset! v1 0 x)
    (pset! v1 1 y)))

(bind-func v2set
  (lambda (v1:vec v2:vec)
    (pset! v1 0 (pref v2 0))
    (pset! v1 1 (pref v2 1))))

;;pretty print
;(bind-func print_vec2 ;;doesn't work! prints the same garbage every time
;	(lambda (v:vec)
;		(printf "(%d,%d)" (ftod (vec2_get_x v)) (ftod (vec2_get_y v)))))


;;vector arithmetic return value
(bind-func v2add
  (lambda (v1:vec v2:vec)
    (let ((sum:vec (zalloc 2)))
      (vvsum v1 v2 2 sum)
      sum)))

(bind-func v2sub
  (lambda (v1:vec v2:vec)
    (let ((difference:vec (zalloc 2)))
      (vvsub v1 v2 2 difference)
      difference)))

;;vector arithmetic mutable
(bind-func v2inc
  (lambda (v1:vec v2:vec)
    (vvsum v1 v2 2 v1)))

(bind-func v2dec
  (lambda (v1:vec v2:vec)
    (vvsub v1 v2 2 v1)))

(bind-func v2scale
  (lambda (v1:vec scale:float)
    (pset! v1 0 (* (pref v1 0) scale))
    (pset! v1 1 (* (pref v1 1) scale))))

(bind-func v2div
  (lambda (v1:vec scale:float)
    (pset! v1 0 (/ (pref v1 0) scale))
    (pset! v1 1 (/ (pref v1 1) scale))))

(bind-func magnitude
  (lambda (v1:vec)
    (vmag v1 2)))

(bind-func normalize
  (lambda (v1:vec)
    (vnormalise v1 2 v1)))

 (bind-func limit_mag:[float,vec,float]*
   (lambda (v1:vec limit:float)
     (if (> (magnitude v1) limit)
       (begin 
         (normalize v1)
         (v2scale v1 limit)) 
       0.)))

;; functions
(bind-func distance:[float,float,float,float,float]*
	(lambda (x1 y1 x2 y2)
		(sqrt (+ 
			(* (- x2 x1) (- x2 x1))
			(* (- y2 y1) (- y2 y1))))))

(bind-func distance
	(lambda (v1:vec v2:vec)
    (sqrt (+ 
      (* (- (getx v2) (getx v1)) (- (getx v2) (getx v1)))
      (* (- (gety v2) (gety v1)) (- (gety v2) (gety v1)))))))


