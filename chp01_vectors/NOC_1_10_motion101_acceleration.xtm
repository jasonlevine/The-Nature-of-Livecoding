; /**
;  * Acceleration with Vectors 
;  * by Daniel Shiffman.  
;  * 
;  * Demonstration of the basics of motion with vector.
;  * A "Mover" object stores location, velocity, and acceleration as vectors
;  * The motion is controlled by affecting the acceleration (in this case towards the mouse)
;  */
;; Ported to Extempore by Jason Levine
;; setup window dims

(bind-val width float 800.)
(bind-val height float 200.)

(sys:load "The-Nature-of-Livecoding/processing.xtm")

;;make mover type loc vel accel topspeed
(bind-type Mover <vec2*,vec2*,vec2*,float>)

;;constructor
 (bind-func Mover
 	(lambda ()
		(let ((location:vec2* (vec2 (rand (* width 0.5)) (rand (* height 0.5))))
					(velocity:vec2* (vec2 0. 0.))
					(acceleration:vec2* (vec2 0. 0.))
					(topspeed:float 6.))
			(Mover:[Mover*,vec2*,vec2*,vec2*,float] 
				location 
				velocity 
				acceleration 
				topspeed))))


;;update 
(bind-func update
	(lambda (m:Mover*)
		(let ((location:vec2* (tref m 0))
					(velocity:vec2* (tref m 1))
					(acceleration:vec2* (tref m 2))
					(topspeed:float (tref m 3)))

			;;get acceleration from mouse pos
			(let ((mouse_pos:vec2* (vec2 (mouse_x) (mouse_y))))
				(v2dec mouse_pos location)
				(normalize mouse_pos)
				(v2scale mouse_pos 0.2)
				(v2set acceleration (getx mouse_pos) (gety mouse_pos)))

			(v2inc velocity acceleration) ;; add accel to vel
			(limit velocity topspeed) ;; limit vel by topspeed
			(v2inc location velocity) ;; add vel to location
			void)))

;;check bounds. wrap around
(bind-func check_edges
	(lambda (m:Mover*)
		(let ((location:vec2* (tref m 0))
					(velocity:vec2* (tref m 1)))

			(if (> (getx location) width) 
				(setx location 0.))

			(if (< (getx location) 0.) 
				(setx location width))

			(if (> (gety location) height) 
				(sety location 0.))

			(if (< (gety location) 0.) 
				(sety location height)))
		void))

;;display mover		
(bind-func display				
	(lambda (m:Mover*)
		(stroke 0)
		(stroke_width 2.0)
		(fill 127)
		(circle (tref m 0) 48.0)
		void))


;; setup variables
(bind-val mover Mover* (Mover))

;; draw loop
(bind-func draw
  (lambda ()
  	(background 255)
  	(update mover)
  	(check_edges mover)
  	(display mover)))