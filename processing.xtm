;;window and renderer setup
(sys:load "libs/external/glfw3.xtm")
(sys:load "The-Nature-of-Livecoding/vec2.xtm")

(bind-val window GLFWwindow*
  (begin
    (glfwSetErrorCallback (convert (get_native_fptr glfw_error_callback)))
    (glfw_init_and_create_interaction_window (convert width) (convert height))))

(sys:load "libs/external/nanovg.xtm")
(bind-val vg NVGcontext* (nvg_create_context))
(bind-val pixel_ratio float (glfw_get_pixel_ratio window))


;; wrappers for processing like functions and vars

;; background gray
(bind-func background
	(lambda (gray:i32)
    (let ((grayf:float  (/ (i32tof gray) 255.)))
		      (nvgFillColor vg (NVGcolor grayf grayf grayf 1.0)))
      (nvgBeginPath vg)
      (nvgRect vg 0. 0. width height)
      (nvgFill vg)))

;; background rgb
(bind-func background
  (lambda (r:i32 g b)
    (let ((redf:float  (/ (i32tof r) 255.))
      (greenf:float  (/ (i32tof g) 255.))
      (bluef:float  (/ (i32tof b) 255.)))
      (nvgFillColor vg (NVGcolor redf greenf bluef 1.0)))
    (nvgBeginPath vg)
    (nvgRect vg 0. 0. width height)
    (nvgFill vg)))

;; bg rgba
(bind-func background
  (lambda (r:i32 g b a)
    (let ((redf:float  (/ (i32tof r) 255.))
      (greenf:float  (/ (i32tof g) 255.))
      (bluef:float  (/ (i32tof b) 255.))
      (alphaf:float  (/ (i32tof a) 255.)))
      (nvgFillColor vg (NVGcolor redf greenf bluef alphaf)))
    (nvgBeginPath vg)
    (nvgRect vg 0. 0. width height)
    (nvgFill vg)))

;; bg gray alpha
(bind-func background
  (lambda (gray:i32 alpha)
    (let ((grayf:float  (/ (i32tof gray) 255.))
          (alphaf:float  (/ (i32tof alpha) 255.)))
      (nvgFillColor vg (NVGcolor grayf grayf grayf alphaf)))
      (nvgBeginPath vg)
      (nvgRect vg 0. 0. width height)
      (nvgFill vg)))

;; bg rgb float
(bind-func background
  (lambda (r:float g b)
    (nvgFillColor vg (NVGcolor r g b 1.0))
    (nvgBeginPath vg)
    (nvgRect vg 0. 0. width height)
    (nvgFill vg)))

;;bg rgba float
(bind-func background
  (lambda (r:float g b a)
    (nvgFillColor vg (NVGcolor r g b a))
    (nvgBeginPath vg)
    (nvgRect vg 0. 0. width height)
    (nvgFill vg)))


;; fill rgb
(bind-func fill
 (lambda (r:i32 g b)
  (let ((redf:float  (/ (i32tof r) 255.))
        (greenf:float  (/ (i32tof g) 255.))
        (bluef:float  (/ (i32tof b) 255.)))
    (nvgFillColor vg (NVGcolor redf greenf bluef 1.0)))))

;;fill rgba
(bind-func fill
 (lambda (r:i32 g b a)
  (let ((redf:float  (/ (i32tof r) 255.))
        (greenf:float  (/ (i32tof g) 255.))
        (bluef:float  (/ (i32tof b) 255.))
        (alphaf:float  (/ (i32tof a) 255.)))
    (nvgFillColor vg (NVGcolor redf greenf bluef alphaf)))))


;; fill gray
(bind-func fill
  (lambda (gray:i32)
   (let ((grayf:float  (/ (i32tof gray) 255.)))
    (nvgFillColor vg (NVGcolor grayf grayf grayf 1.0)))))

;; fill gray alpha
(bind-func fill
  (lambda (gray:i32 alpha:i32)
    (let ((grayf:float  (/ (i32tof gray) 255.))
          (alphaf:float (/ (i32tof alpha) 255.)))
      (nvgFillColor vg (NVGcolor grayf grayf grayf alphaf)))))


;; fill rgba float
(bind-func fill
  (lambda (r:float g b a)
    (nvgFillColor vg (NVGcolor r g b a))))


(bind-func nofill
  (lambda ()
    (fill 0.0 0.0 0.0 0.0)))


;; stroke rgb
(bind-func stroke
 (lambda (r:i32 g b)
  (let ((redf:float  (/ (i32tof r) 255.))
        (greenf:float  (/ (i32tof g) 255.))
        (bluef:float  (/ (i32tof b) 255.)))
    (nvgStrokeColor vg (NVGcolor redf greenf bluef 1.0)))))

;;stroke rgba
(bind-func stroke
 (lambda (r:i32 g b a)
  (let ((redf:float  (/ (i32tof r) 255.))
        (greenf:float  (/ (i32tof g) 255.))
        (bluef:float  (/ (i32tof b) 255.))
        (alphaf:float  (/ (i32tof a) 255.)))
    (nvgStrokeColor vg (NVGcolor redf greenf bluef alphaf)))))


;; stroke gray
(bind-func stroke
  (lambda (gray:i32)
   (let ((grayf:float  (/ (i32tof gray) 255.)))
    (nvgStrokeColor vg (NVGcolor grayf grayf grayf 1.0)))))

;; stroke gray alpha
(bind-func stroke
  (lambda (gray:i32 alpha:i32)
    (let ((grayf:float  (/ (i32tof gray) 255.))
          (alphaf:float (/ (i32tof alpha) 255.)))
      (nvgStrokeColor vg (NVGcolor grayf grayf grayf alphaf)))))


;; stroke rgba float
(bind-func stroke
  (lambda (r:float g b a)
    (nvgStrokeColor vg (NVGcolor r g b a))))

(bind-func nostroke
  (lambda ()
    (stroke 0.0 0.0 0.0 0.0)))

(bind-func stroke_width
	(lambda (width:float)
		(nvgStrokeWidth vg width)))


;; circle
(bind-func circle
	(lambda (x:float y radius)
		(nvgBeginPath vg)
    (nvgCircle vg x y radius)
    (nvgFill vg)
    (nvgStroke vg)))

(bind-func circle
  (lambda (pos:vec2* radius:float)
    (nvgBeginPath vg)
    (nvgCircle vg (getx pos) (gety pos) radius)
    (nvgFill vg)
    (nvgStroke vg)))

;; rectangle

(bind-val CORNER i1 0)
(bind-val CENTER i1 1)
(bind-val RECTMODE i1 CORNER)

(bind-func rect_mode
	(lambda (mode:i1)
		(set! RECTMODE mode)
		void))

(bind-func rectangle
	(lambda (x:float y w h)
		(nvgBeginPath vg)
		(cond ((= RECTMODE CORNER) (nvgRect vg x y w h))
					((= RECTMODE CENTER)
						(nvgRect vg
							(- x (* w 0.5))
							(- y (* h 0.5))
							w h)))
    (nvgFill vg)
    (nvgStroke vg)
		void))

(bind-func rectangle
	(lambda (x:float y size)
	(rectangle:[void,float,float,float,float]* x y size size)))

(bind-func rectangle
	(lambda (pos:vec2* w h)
		(rectangle:[void,float,float,float,float]*
			(getx pos) (gety pos) w h)))

(bind-func rectangle
	(lambda (pos:vec2* size:float)
		(rectangle:[void,float,float,float,float]*
			(getx pos) (gety pos) size size)))
;; line
(bind-func line
  (lambda (x1:float y1 x2 y2)
    (nvgBeginPath vg)
    (nvgMoveTo vg x1 y1)
    (nvgLineTo vg x2 y2)
    (nvgClosePath vg)
    (nvgStroke vg)))

;;--------RANDOM-------
(bind-func rand:[float,float,float]*
  (lambda (min:float max)
    (+ (* (random) (- max min)) min)))

(bind-func rand:[float,float]*
  (lambda (max:float)
    (* (random) max)))


;; --------MATH--------
(bind-func constrain
  (lambda (val:float min:float max:float)
    (cond ((< val min) min)
          ((> val max) max)
          (else val))))



;; Transformations


(bind-func translate
  (lambda (x:float y)
    (nvgTranslate vg x y)))

(bind-func translate
  (lambda (pos:vec2*)
    (nvgTranslate vg (getx pos) (gety pos))))

(bind-func rotate
	(lambda (degrees:float)
		(nvgRotate vg degrees)))

;; ------MOUSE------
(bind-func mouse_x
  (lambda ()
    (let ((x_ptr:double* (salloc))
          (y_ptr:double* (salloc)))
      (glfwGetCursorPos window x_ptr y_ptr)
      (convert (pref x_ptr 0) float))))

(bind-func mouse_y
  (lambda ()
    (let ((x_ptr:double* (salloc))
          (y_ptr:double* (salloc)))
      (glfwGetCursorPos window x_ptr y_ptr)
      (convert (pref y_ptr 0) float))))

(bind-func mouse_pressed
  (lambda ()
    (= (glfwGetMouseButton window 0) GLFW_PRESS)))

(bind-func mouse_released
  (lambda ()
    (= (glfwGetMouseButton window 0) GLFW_RELEASE)))

;; -------WINDOW--------
(bind-func resize
  (lambda (width:i32 height)
    (glfwSetWindowSize window width height)))





;;  ------DRAW LOOP------
;; empty draw func to be reevaluated
(bind-func draw
    (lambda ()
    	(background 0.0 0.0 0.0)))

; draw loop
(bind-func nvg_draw_loop
	(let ((frame:i64 0))
  (lambda (time:i64 delta_t:double)
    ;(nvg_clear)
    (nvgBeginFrame vg (convert width) (convert height) pixel_ratio)
    (nvgResetTransform vg)
    (draw)
    (nvgEndFrame vg)
    (set! frame (+ frame 1))
    (glfwPollEvents)
    (glfwSwapBuffers window)
    (let ((next_time (+ time (convert (* 44100. delta_t)))))
      (callback next_time nvg_draw_loop next_time delta_t)))))


;;start draw loop
(nvg_draw_loop (now) (/ 1. 60.))

;; to stop the draw loop, eval this version of nvg_draw_loop
;; (bind-func nvg_draw_loop
;;   (lambda (time:i64 delta_t:double)
;;     (println "nvg_draw_loop callback stopped")
;;     #f))
